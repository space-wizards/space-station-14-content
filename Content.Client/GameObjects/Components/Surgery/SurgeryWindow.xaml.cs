#nullable enable
using System;
using System.Collections.Generic;
using Content.Shared.GameObjects.Components.Surgery.Operation;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.GameObjects;
using Robust.Shared.Localization;

namespace Content.Client.GameObjects.Components.Surgery
{
    [GenerateTypedNameReferences]
    public partial class SurgeryWindow : SS14Window
    {
        public SurgeryWindow()
        {
            MinSize = SetSize = (500, 250);
            RobustXamlLoader.Load(this);
        }

        public Action<IEntity, string>? OperationSelected;

        public void SetTargets(Dictionary<IEntity, IEnumerable<SurgeryOperationPrototype>> targets)
        {
            Operations.DisposeAllChildren();

            var tabs = new Dictionary<string, OperationTab>();

            foreach (var (target, targetOperations) in targets)
            {
                foreach (var operation in targetOperations)
                {
                    if (operation.Hidden)
                    {
                        continue;
                    }

                    if (!tabs.TryGetValue(operation.ID, out var tab))
                    {
                        tab = new OperationTab
                        {
                            Name = operation.Name
                        };

                        tabs.Add(operation.ID, tab);
                        Operations.AddChild(tab);
                    }

                    var targetButton = new TargetButton(target.Uid) {Text = Loc.GetString(target.Name)};

                    targetButton.OnPressed += _ => OperationSelected?.Invoke(target, operation.ID);
                    tab.TargetsContainer.AddChild(targetButton);
                }
            }
        }
    }
}
